using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;
using System.Diagnostics;
using AgenaTrader.API;
using AgenaTrader.Custom;
using AgenaTrader.Plugins;
using AgenaTrader.Helper;

/// <summary>
/// Version: 1.1
/// -------------------------------------------------------------------------
/// Simon Pucher 2016
/// -------------------------------------------------------------------------
/// The indicator was taken from: http://www.greattradingsystems.com/Coppock-ninjatraderindicator
/// Code was generated by AgenaTrader conversion tool and modified by Simon Pucher.
/// -------------------------------------------------------------------------
/// ****** Important ******
/// To compile this script without any error you also need access to the utility indicator to use these global source code elements.
/// You will find this indicator on GitHub: https://raw.githubusercontent.com/simonpucher/AgenaTrader/master/Utilities/GlobalUtilities_Utility.cs
/// -------------------------------------------------------------------------
/// Namespace holds all indicators and is required. Do not change it.
/// </summary>
namespace AgenaTrader.UserCode
{
    /// <summary>
    /// The anaMACDBBLines (Moving Average Convergence/Divergence) is a trend following momentum indicator that shows the relationship between two moving averages of prices.
    /// Optimized execution by predefining instances of external indicators (Zondor August 10 2010)    
    /// </summary>
    [Description("The Coppock (Moving Average Convergence/Divergence) is a trend following momentum indicator that shows the relationship between two moving averages of prices.")]
	public class Coppock_Indicator : UserIndicator
	{
		#region Variables

        //input
        private int _roclongPeriod = 14;
        private int _rocshortPeriod = 11;
		private int	_wmaperiod	= 10;

        private Color _plot0color = Const.DefaultIndicatorColor;
        private int _plot0width = Const.DefaultLineWidth;
        private DashStyle _plot0dashstyle = Const.DefaultIndicatorDashStyle;

        //internal
        private DataSeries _ROC_Long;
        private DataSeries _ROC_Short;
        private DataSeries _ROC_Combined;


		#endregion


		/// <summary>
		/// This method is used to configure the indicator and is called once before any bar data is loaded.
		/// </summary>
		protected override void OnInit()
		{
            Add(new OutputDescriptor(new Pen(this.Plot0Color, this.Plot0Width), OutputSerieDrawStyle.Line, "Coppock_Curve"));
            Add(new OutputDescriptor(new Pen(Const.DefaultIndicatorColor_GreyedOut, this.Plot0Width), OutputSerieDrawStyle.Line, "Coppock_Curve_GreyedOut"));

            CalculateOnClosedBar = true;
            IsOverlay = false;
		}



		/// <summary>
		/// Calculates the indicator value(s) at the current index.
		/// </summary>
		protected override void OnStart()
		{
            this._ROC_Long = new DataSeries(this);
            this._ROC_Short = new DataSeries(this);
            this._ROC_Combined = new DataSeries(this);
		}



		/// <summary>
		/// 
		/// </summary>
		protected override void OnCalculate()
		{
            

            if (this.DatafeedPeriodicityIsValid(Bars))
            {

                double roc_long_value = ROC(this.ROCLongPeriod)[0];
                this._ROC_Long.Set(roc_long_value);

                double roc_short_value = ROC(this.ROCShortPeriod)[0];
                this._ROC_Short.Set(roc_short_value);

                this._ROC_Combined.Set(roc_long_value + roc_short_value);

                double wma_value = WMA(this._ROC_Combined, this.WMAPeriod)[0];
                this.Coppock_Curve.Set(wma_value);

                this.Coppock_GreyedOut.Set(0.0);

                PlotColors[0][0] = Plot0Color;
                OutputDescriptors[0].PenStyle = this.Dash0Style;
                OutputDescriptors[0].Pen.Width = this.Plot0Width;

                PlotColors[1][0] = Const.DefaultIndicatorColor_GreyedOut;
                OutputDescriptors[1].PenStyle = this.Dash0Style;
                OutputDescriptors[1].Pen.Width = this.Plot0Width;

            }
            else
            {
                //Data feed perodicity is not valid, print info in chart panel 
                if (IsProcessingBarIndexLast)
                {
                    AddChartTextFixed("AlertText", Const.DefaultStringDatafeedPeriodicity, TextPosition.Center, Color.Red, new Font("Arial", 30), Color.Red, Color.Red, 20);
                }
            }
		}

        protected override void OnDispose()
        {
            //Print("OnTermination");
        }


        public override string ToString()
        {
            return "Coppock";
        }

        public override string DisplayName
        {
            get
            {
                return "Coppock";
            }
        }


        /// <summary>
        /// True if the Periodicity of the data feed is correct for this indicator.
        /// </summary>
        /// <returns></returns>
        private bool DatafeedPeriodicityIsValid(IBars bars)
        {
            TimeFrame tf = (TimeFrame)bars.TimeFrame;
            if (tf.Periodicity == DatafeedHistoryPeriodicity.Month || tf.Periodicity == DatafeedHistoryPeriodicity.Week)
            {
                return true;
            }
            else
            {
                return false;
            }
        }




        #region Properties


            #region InSeries 

                /// <summary>
                /// </summary>
                [Description("Period for the long ROC")]
                [Category("Values")]
                [DisplayName("Period ROC long")]
                public int ROCLongPeriod
                {
                    get { return _roclongPeriod; }
                    set { _roclongPeriod = Math.Max(1, value); }
                }

                /// <summary>
                /// </summary>
                [Description("Period for the short ROC")]
                [Category("Values")]
                [DisplayName("Period ROC short")]
                public int ROCShortPeriod
                {
                    get { return _rocshortPeriod; }
                    set { _rocshortPeriod = Math.Max(1, value); }
                }

                /// <summary>
                /// </summary>
                [Description("Period for WMA")]
                [Category("Values")]
                [DisplayName("Period for WMA")]
                public int WMAPeriod
                {
                    get { return _wmaperiod; }
                    set { _wmaperiod = Math.Max(1, value); }
                }



                /// <summary>
                /// </summary>
                [Description("Select Color for Coppock Curve")]
                [Category("Colors")]
                [DisplayName("Coppock Curve")]
                public Color Plot0Color
                {
                    get { return _plot0color; }
                    set { _plot0color = value; }
                }

                // Serialize Color object
                [Browsable(false)]
                public string MainSerialize
                {
                    get { return SerializableColor.ToString(_plot0color); }
                    set { _plot0color = SerializableColor.FromString(value); }
                }



                /// <summary>
                /// </summary>
                [Description("Width for Coppock Curve.")]
                [Category("Plots")]
                [DisplayName("Line Width Coppock Curve")]
                public int Plot0Width
                {
                    get { return _plot0width; }
                    set { _plot0width = Math.Max(1, value); }
                }



                /// <summary>
                /// </summary>
                [Description("DashStyle for Coppock Curve.")]
                [Category("Plots")]
                [DisplayName("Dash Style Coppock Curve")]
                public DashStyle Dash0Style
                {
                    get { return _plot0dashstyle; }
                    set { _plot0dashstyle = value; }
                } 
		
            #endregion



            #region Output

                [Browsable(false)]
                [XmlIgnore()]
                public DataSeries Coppock_Curve
                {
                    get { return Outputs[0]; }
                }

                [Browsable(false)]
                [XmlIgnore()]
                public DataSeries Coppock_GreyedOut
                {
                    get { return Outputs[1]; }
                }

            #endregion

        #endregion
    }
}