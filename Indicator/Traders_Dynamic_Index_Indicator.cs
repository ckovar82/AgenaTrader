using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;
using System.Diagnostics;
using AgenaTrader.API;
using AgenaTrader.Custom;
using AgenaTrader.Plugins;
using AgenaTrader.Helper;

/// <summary>
/// Version: 1.2.0
/// -------------------------------------------------------------------------
/// Simon Pucher 2016
/// -------------------------------------------------------------------------
/// The indicator was taken from: http://metick.com/forotraderninja/viewtopic.php?t=976
/// Code was generated by AgenaTrader conversion tool and modified by Simon Pucher.
/// -------------------------------------------------------------------------
/// ****** Important ******
/// To compile this script without any error you also need access to the utility indicator to use these global source code elements.
/// You will find this indicator on GitHub: https://raw.githubusercontent.com/simonpucher/AgenaTrader/master/Utilities/GlobalUtilities_Utility.cs
/// -------------------------------------------------------------------------
/// Namespace holds all indicators and is required. Do not change it.
/// </summary>
namespace AgenaTrader.UserCode
{
    /// <summary>
    /// The anaMACDBBLines (Moving Average Convergence/Divergence) is a trend following momentum indicator that shows the relationship between two moving averages of prices.
    /// Optimized execution by predefining instances of external indicators (Zondor August 10 2010)
    /// </summary>
	[Description("The TDI (Moving Average Convergence/Divergence) is a trend following momentum indicator that shows the relationship between two moving averages of prices.")]
	public class TDI_Indicator : UserIndicator
	{

        //input
        private int _rsiPeriod = 13;
		private int _pricePeriod = 2;
		private int	_signalPeriod = 7;
		private int	_bandPeriod = 34;
		private double _stdDevNumber = 1.62;

		private Color _main = Color.Lime;
		private Color _signal = Color.Red;
        private Color _bbAverage = Color.Gold;
		private Color _bbUpper = Color.CornflowerBlue;
		private Color _bbLower = Color.CornflowerBlue;
		private Color _midPositive = Color.Olive;
		private Color _midNegative = Color.RosyBrown;

        private int _plot0Width = Const.DefaultLineWidth;
        private DashStyle _dash0Style = Const.DefaultIndicatorDashStyle;
        private int _plot1Width = Const.DefaultLineWidth;
        private DashStyle _dash1Style = Const.DefaultIndicatorDashStyle;
        private int _plot2Width = Const.DefaultLineWidth;
        private DashStyle _dash2Style = Const.DefaultIndicatorDashStyle;
        private int _plot3Width = Const.DefaultLineWidth_small;
        private DashStyle _dash3Style = Const.DefaultIndicatorDashStyle;

        //output

        //internal
        private DataSeries _RSI_List;


    
	

		/// <summary>
		/// This method is used to configure the indicator and is called once before any bar data is loaded.
		/// </summary>
		protected override void OnInit()
		{
            Add(new OutputDescriptor(new Pen(this.Main, this.Plot0Width), OutputSerieDrawStyle.Line, "LinePrice"));
            Add(new OutputDescriptor(new Pen(this.Signal, this.Plot1Width), OutputSerieDrawStyle.Line, "Signalline"));
            Add(new OutputDescriptor(new Pen(this.BBAverage, this.Plot2Width), OutputSerieDrawStyle.Line, "Average"));
            Add(new OutputDescriptor(new Pen(this.BBUpper, this.Plot3Width), OutputSerieDrawStyle.Line, "Upper"));
            Add(new OutputDescriptor(new Pen(this.BBUpper, this.Plot3Width), OutputSerieDrawStyle.Line, "Lower"));
            Add(new OutputDescriptor(new Pen(Color.Gray, this.Plot3Width), OutputSerieDrawStyle.Line, "MidLine"));

            CalculateOnClosedBar = true;
            IsOverlay = false;
		}


		/// <summary>
		/// Calculates the indicator value(s) at the current index.
		/// </summary>
		protected override void OnStart()
        {
            this._RSI_List = new DataSeries(this);
		}
		
		protected override void OnCalculate()
		{
            double RSI_value = RSI(this.RSIPeriod, 1)[0];
            this._RSI_List.Set(RSI_value);

            double PRICE_value = SMA(this._RSI_List, this.PricePeriod)[0];
            LinePrice.Set(PRICE_value);

            double SIGNAL_value = SMA(this._RSI_List, this.SignalPeriod)[0];
            SignalLine.Set(SIGNAL_value);

            double AVG_value = SMA(this._RSI_List, this.BandPeriod)[0];
            Average.Set(AVG_value);
            MidLine.Set(50);

            double stdDevValue = StdDev(this._RSI_List, this.BandPeriod)[0];

            Upper.Set(AVG_value + this.StdDevNumber * stdDevValue);
            Lower.Set(AVG_value - this.StdDevNumber * stdDevValue);

            PlotColors[0][0] = this.Main;
            PlotColors[1][0] = this.Signal;
            PlotColors[2][0] = this.BBAverage;
            PlotColors[3][0] = this.BBUpper;
            PlotColors[4][0] = this.BBLower;
            
            if (AVG_value > 50)
                PlotColors[5][0] = this.MidPositive;
            else
                PlotColors[5][0] = this.MidNegative;

            OutputDescriptors[0].PenStyle = this.Dash0Style;
            OutputDescriptors[0].Pen.Width = this.Plot0Width;
            OutputDescriptors[1].PenStyle = this.Dash1Style;
            OutputDescriptors[1].Pen.Width = this.Plot1Width;
            OutputDescriptors[2].PenStyle = this.Dash2Style;
            OutputDescriptors[2].Pen.Width = this.Plot2Width;

            OutputDescriptors[3].PenStyle = this.Dash3Style;
            OutputDescriptors[3].Pen.Width = this.Plot3Width;
            OutputDescriptors[4].PenStyle = this.Dash3Style;
            OutputDescriptors[4].Pen.Width = this.Plot3Width;
            OutputDescriptors[5].PenStyle = this.Dash3Style;
            OutputDescriptors[5].Pen.Width = this.Plot3Width;
 
		}

        public override string ToString()
        {
            return "TDI";
        }

        public override string DisplayName
        {
            get
            {
                return "TDI";
            }
        }

        #region Properties


        #region InSeries



        [XmlIgnore()]
        [Description("Select Color")]
        [Category("Parameters")]
        [DisplayName("Pricline")]
        public Color Main
        {
            get { return _main; }
            set { _main = value; }
        }

        [Browsable(false)]
        public string MainSerialize
        {
            get { return SerializableColor.ToString(_main); }
            set { _main = SerializableColor.FromString(value); }
        }


        [XmlIgnore()]
        [Description("Select Color")]
        [Category("Parameters")]
        [DisplayName("Signalline")]
        public Color Signal
        {
            get { return _signal; }
            set { _signal = value; }
        }

        [Browsable(false)]
        public string SignalSerialize
        {
            get { return SerializableColor.ToString(_signal); }
            set { _signal = SerializableColor.FromString(value); }
        }


        [XmlIgnore()]
        [Description("Select Color")]
        [Category("Parameters")]
        [DisplayName("Bollinger Average")]
        public Color BBAverage
        {
            get { return _bbAverage; }
            set { _bbAverage = value; }
        }

        [Browsable(false)]
        public string BBAverageSerialize
        {
            get { return SerializableColor.ToString(_bbAverage); }
            set { _bbAverage = SerializableColor.FromString(value); }
        }


        [XmlIgnore()]
        [Description("Select Color")]
        [Category("Parameters")]
        [DisplayName("Bollinger Upper Band")]
        public Color BBUpper
        {
            get { return _bbUpper; }
            set { _bbUpper = value; }
        }

        [Browsable(false)]
        public string BBUpperSerialize
        {
            get { return SerializableColor.ToString(_bbUpper); }
            set { _bbUpper = SerializableColor.FromString(value); }
        }


        [XmlIgnore()]
        [Description("Select Color")]
        [Category("Parameters")]
        [DisplayName("Bollinger Lower Band")]
        public Color BBLower
        {
            get { return _bbLower; }
            set { _bbLower = value; }
        }

        [Browsable(false)]
        public string BBLowerSerialize
        {
            get { return SerializableColor.ToString(_bbLower); }
            set { _bbLower = SerializableColor.FromString(value); }
        }


        [XmlIgnore()]
        [Description("Select Color")]
        [Category("Parameters")]
        [DisplayName("Midline Positive")]
        public Color MidPositive
        {
            get { return _midPositive; }
            set { _midPositive = value; }
        }

        [Browsable(false)]
        public string MidPositiveSerialize
        {
            get { return SerializableColor.ToString(_midPositive); }
            set { _midPositive = SerializableColor.FromString(value); }
        }


        [XmlIgnore()]
        [Description("Select Color")]
        [Category("Parameters")]
        [DisplayName("Midline Negative")]
        public Color MidNegative
        {
            get { return _midNegative; }
            set { _midNegative = value; }
        }

        [Browsable(false)]
        public string MidNegativeSerialize
        {
            get { return SerializableColor.ToString(_midNegative); }
            set { _midNegative = SerializableColor.FromString(value); }
        }

        [Description("Period for RSI")]
        [Category("Parameters")]
        [DisplayName("Period for RSI")]
        public int RSIPeriod
        {
            get { return _rsiPeriod; }
            set { _rsiPeriod = Math.Max(1, value); }
        }



        [Description("Period for LinePrice")]
        [Category("Parameters")]
        [DisplayName("Period for LinePrice")]
        public int PricePeriod
        {
            get { return _pricePeriod; }
            set { _pricePeriod = Math.Max(1, value); }
        }

        /// <summary>
        /// </summary>
        [Description("Period for Signalline")]
        [Category("Parameters")]
        [DisplayName("Period for Signalline")]
        public int SignalPeriod
        {
            get { return _signalPeriod; }
            set { _signalPeriod = Math.Max(1, value); }
        }

        /// <summary>
        /// </summary>
        [Description("Band Period for Bollinger Band")]
        [Category("Parameters")]
        [DisplayName("Period for VolaBands")]
        public int BandPeriod
        {
            get { return _bandPeriod; }
            set { _bandPeriod = Math.Max(1, value); }
        }

        /// <summary>
        /// </summary>
        [Description("Number of standard deviations")]
        [Category("Parameters")]
        [DisplayName("# of Std. Dev.")]
        public double StdDevNumber
        {
            get { return _stdDevNumber; }
            set { _stdDevNumber = Math.Max(0, value); }
        }


        /// <summary>
        /// </summary>
        [Description("Width for LinePrice.")]
        [Category("Parameters")]
        [DisplayName("Line Width LinePrice")]
        public int Plot0Width
        {
            get { return _plot0Width; }
            set { _plot0Width = Math.Max(1, value); }
        }


        /// <summary>
        /// </summary>
        [Description("DashStyle for LinePrice.")]
        [Category("Parameters")]
        [DisplayName("Dash Style LinePrice")]
        public DashStyle Dash0Style
        {
            get { return _dash0Style; }
            set { _dash0Style = value; }
        }

        /// <summary>
        /// </summary>
        [Description("Width for Signalline.")]
        [Category("Parameters")]
        [DisplayName("Line Width Signal")]
        public int Plot1Width
        {
            get { return _plot1Width; }
            set { _plot1Width = Math.Max(1, value); }
        }

        /// <summary>
        /// </summary>
        [Description("DashStyle for Signalline.")]
        [Category("Parameters")]
        [DisplayName("Dash Style Signal")]
        public DashStyle Dash1Style
        {
            get { return _dash1Style; }
            set { _dash1Style = value; }
        }

        /// <summary>
        /// </summary>
        [Description("Width for Midband.")]
        [Category("Parameters")]
        [DisplayName("Line Width Midband")]
        public int Plot2Width
        {
            get { return _plot2Width; }
            set { _plot2Width = Math.Max(1, value); }
        }


        /// <summary>
        /// </summary>
        [Description("DashStyle for Bollinger Bands.")]
        [Category("Parameters")]
        [DisplayName("Dash Style BBands")]
        public DashStyle Dash2Style
        {
            get { return _dash2Style; }
            set { _dash2Style = value; }
        }

        /// <summary>
        /// </summary>
        [Description("Width for Bollinger Bands.")]
        [Category("Parameters")]
        [DisplayName("Line Width BBAnds")]
        public int Plot3Width
        {
            get { return _plot3Width; }
            set { _plot3Width = Math.Max(1, value); }
        }


        /// <summary>
        /// </summary>
        [Description("DashStyle for Trigger Average Line.")]
        [Category("Parameters")]
        [DisplayName("Dash Style Average")]
        public DashStyle Dash3Style
        {
            get { return _dash3Style; }
            set { _dash3Style = value; }
        }

        #endregion



        #region Output

        [Browsable(false)]
        [XmlIgnore()]
        public DataSeries LinePrice
        {
            get { return Outputs[0]; }
        }


        [Browsable(false)]
        [XmlIgnore()]
        public DataSeries SignalLine
        {
            get { return Outputs[1]; }
        }


        [Browsable(false)]
        [XmlIgnore()]
        public DataSeries Average
        {
            get { return Outputs[2]; }
        }

        [Browsable(false)]
        [XmlIgnore()]
        public DataSeries Upper
        {
            get { return Outputs[3]; }
        }

        [Browsable(false)]
        [XmlIgnore()]
        public DataSeries Lower
        {
            get { return Outputs[4]; }
        }

        [Browsable(false)]
        [XmlIgnore()]
        public DataSeries MidLine
        {
            get { return Outputs[5]; }
        }
        #endregion



        #endregion




	
	}
}