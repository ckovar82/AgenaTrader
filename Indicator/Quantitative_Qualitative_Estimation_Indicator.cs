using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;
using System.Diagnostics;
using AgenaTrader.API;
using AgenaTrader.Custom;
using AgenaTrader.Plugins;
using AgenaTrader.Helper;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;

/// <summary>
/// Version: 1.2.0
/// -------------------------------------------------------------------------
/// Simon Pucher 2016
/// -------------------------------------------------------------------------
/// The indicator was taken from: http://www.greattradingsystems.com/QQE-ninjatraderindicator
/// Code was generated by AgenaTrader conversion tool and modified by Simon Pucher.
/// -------------------------------------------------------------------------
/// ****** Important ******
/// To compile this script without any error you also need access to the utility indicator to use global source code elements.
/// You will find this script on GitHub: https://raw.githubusercontent.com/simonpucher/AgenaTrader/master/Utilities/GlobalUtilities_Utility.cs
/// -------------------------------------------------------------------------
/// Namespace holds all indicators and is required. Do not change it.
/// </summary>
namespace AgenaTrader.UserCode
{
    /// <summary>
    /// Version 1.0 11/04/08
	/// Converted from MQL by Elliott Wave and PrTester.
    /// </summary>
    [Description("Qualitative Quantitative Estimation. QQE is a combination moving average RSI + ATR.")]
    public class QQE : UserIndicator
    {
        #region Variables
        // Wizard generated variables
            private int rSI_Period = 14; // Default setting for RSI_Period

            private Color _line01 = Color.DodgerBlue;
            private Color _line02 = Color.Gold;
            private Color _line_upper = Color.Gray;
            private Color _line_mid = Color.Gray;
            private Color _line_lower = Color.Gray;
		
			private int Wilders_Period;
			private int StartBar, LastAlertBar;
			private int sF=5;
		
		    private DataSeries TrLevelSlow;
			private DataSeries AtrRsi;
			private DataSeries MaAtrRsi;
			private DataSeries RsiAr;
			private DataSeries RsiMa;

        private IBar lastcrossabove = null;

        // User defined variables (add any user defined variables below)
        #endregion

        /// <summary>
        /// This method is used to configure the indicator and is called once before any bar data is loaded.
        /// </summary>
            protected override void OnInit()
        {

            Add(new OutputDescriptor(new Pen(this.Line_01, 2), OutputSerieDrawStyle.Line, "Value1"));
            Add(new OutputDescriptor(new Pen(this.Line_02, 2), OutputSerieDrawStyle.Line, "Value2"));
            OutputDescriptors[1].Pen.DashStyle = DashStyle.Dash;

            Add(new LevelLine(_line_lower, 70, "Upper Line"));
            Add(new LevelLine(_line_mid, 50, "Mid Line"));
            Add(new LevelLine(_line_upper, 30, "Lower Line"));

			Lines[0].Pen.DashStyle = DashStyle.Dash;
			Lines[1].Pen.DashStyle = DashStyle.Dash;
			
			
			CalculateOnClosedBar	= true;
            IsOverlay				= false;
            PriceTypeSupported	= true;
			
			AtrRsi = new DataSeries(this);
			MaAtrRsi = new DataSeries(this);


			Wilders_Period=rSI_Period * 2 - 1;
			if (Wilders_Period < SF)
				StartBar=SF;
			else
				StartBar=Wilders_Period;


				}

        /// <summary>
        /// Called on each bar update event (incoming tick)
        /// </summary>
        protected override void OnCalculate()
        {
			double rsi0, rsi1, dar, tr, dv;
			
			if(ProcessingBarIndex <= StartBar)
				return;
			
				
			Value1.Set(EMA(RSI(rSI_Period,3),sF)[0]);
			
				
			
			AtrRsi.Set(Math.Abs(Value1[1] - Value1[0]));
			
			MaAtrRsi.Set(EMA(AtrRsi,Wilders_Period)[0]);
		
			tr = Value2[1];
			rsi1 = Value1[1];

			rsi0 = Value1[0];
			dar = EMA(MaAtrRsi, Wilders_Period)[0] * 4.236;
	
			dv = tr;
			if (rsi0 < tr)
			{
				tr = rsi0 + dar;
				if (rsi1 < dv)
					if (tr > dv)
						tr = dv;
			}
			else if (rsi0 > tr)
			{
				tr = rsi0 - dar;
				if (rsi1 > dv)
					if (tr < dv)
						tr = dv;
			}
			Value2.Set(tr);


            //Change Colors
            PlotColors[0][0] = Line_01;
            PlotColors[1][0] = Line_02;

            //Drawing
            if (CrossAbove(Value1, Value2, 0))
            {
                AddChartArrowUp(ProcessingBarIndex.ToString(), true, 0, Low[0], Color.Green);
                lastcrossabove = Bars[0];
                AddChartText("lastsegmentpercentline" + Time[0], true, "QQI", Time[0], Low[0], 0, Color.Green, new Font("Arial", 8, FontStyle.Bold), StringAlignment.Far, HorizontalAlignment.Center, VerticalAlignment.Bottom, Color.Green, Color.White, 255);

            }
            else if (CrossBelow(Value1, Value2, 0))
            {
                AddChartArrowDown(ProcessingBarIndex.ToString(), true, 0, High[0], Color.Red);
                AddChartText("lastsegmentpercentline" + Time[0], true, "QQI", Time[0], High[0], 0, Color.Red, new Font("Arial", 8, FontStyle.Bold), StringAlignment.Far, HorizontalAlignment.Center, VerticalAlignment.Top, Color.Red, Color.White, 255);

            }

            if (lastcrossabove != null && CrossBelow(Value1, Value2, 0))
            {
                AddChartLine("drawaline" + Time[0], true, lastcrossabove.Time, lastcrossabove.Close, Time[0], Close[0], Color.Black, DashStyle.DashDotDot, 1);
                
            }
        }


        public override string ToString()
        {
            return "Qualitative Quantitative Estimation (I)";
        }

        public override string DisplayName
        {
            get
            {
                return "Qualitative Quantitative Estimation (I)";
            }
        }

        #region Properties
        [Browsable(false)]	// this line prevents the data series from being displayed in the indicator properties dialog, do not remove
        [XmlIgnore()]		// this line ensures that the indicator can be saved/recovered as part of a chart template, do not remove
        public DataSeries Value1
        {
            get { return Outputs[0]; }
        }

        [Browsable(false)]	// this line prevents the data series from being displayed in the indicator properties dialog, do not remove
        [XmlIgnore()]		// this line ensures that the indicator can be saved/recovered as part of a chart template, do not remove
        public DataSeries Value2
        {
            get { return Outputs[1]; }
        }

        [Description("Period for the RSI")]
        [InputParameter]
        public int RSI_Period
        {
            get { return rSI_Period; }
            set { rSI_Period = Math.Max(1, value); }
        }
		[Description("Smoothing Factor")]
        [InputParameter]
        public int SF
        {
            get { return sF; }
            set { sF = Math.Max(1, value); }
        }


        /// <summary>
        /// </summary>
        [Description("Select Color")]
        [Category("Colors")]
        [DisplayName("Line 01")]
        public Color Line_01
        {
            get { return _line01; }
            set { _line01 = value; }
        }


        /// <summary>
        /// </summary>
        [Description("Select Color")]
        [Category("Colors")]
        [DisplayName("Line 02")]
        public Color Line_02
        {
            get { return _line02; }
            set { _line02 = value; }
        }


        /// <summary>
        /// </summary>
        [Description("Select Color")]
        [Category("Colors")]
        [DisplayName("Line Upper")]
        public Color Line_Upper
        {
            get { return _line_upper; }
            set { _line_upper = value; }
        }


        /// <summary>
        /// </summary>
        [Description("Select Color")]
        [Category("Colors")]
        [DisplayName("Line Middle")]
        public Color Line_Mid
        {
            get { return _line_mid; }
            set { _line_mid = value; }
        }

        /// <summary>
        /// </summary>
        [Description("Select Color")]
        [Category("Colors")]
        [DisplayName("Line Lower")]
        public Color Line_Lower
        {
            get { return _line_lower; }
            set { _line_lower = value; }
        }


		
        #endregion
    }
}